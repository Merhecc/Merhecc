<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeanCloud</title>
    <url>/Merhecc/2023/10/01/03/</url>
    <content><![CDATA[<p>LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术问题</tag>
      </tags>
  </entry>
  <entry>
    <title>10月新番《香格里拉边境》</title>
    <url>/Merhecc/2023/09/29/01/</url>
    <content><![CDATA[<p>话说香格里拉到底是什么啊，国外有香格里拉酒店、饭店，霓虹有动漫，云南有香格里拉市，我们这有香格里拉小区，在网上搜也没个所以然，这动漫男主还是个鸟人。</p>
<p><img src="/Merhecc/./images/01%E9%A6%99%E6%A0%BC%E9%87%8C%E6%8B%89%E8%BE%B9%E5%A2%83.jpg" alt="兔子" title="兔子npc"><img src="/Merhecc/./images/02%E9%A6%99%E6%A0%BC%E9%87%8C%E6%8B%89%E8%BE%B9%E5%A2%83.jpg" alt="鸟人" title="男主"></p>
]]></content>
      <categories>
        <category>ACG</category>
      </categories>
      <tags>
        <tag>anime</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo部署github问题</title>
    <url>/Merhecc/2023/10/01/02/</url>
    <content><![CDATA[<p>首先问题出在部署上面，在config.yml中url设置了github仓库之后，根目录会自动变成github仓库目录，所以会多一层路由，例如merhecc.github.io&#x2F;Merhecc&#x2F;。就会多一层&#x2F;Merhecc&#x2F;。</p>
<p>解决方法就是把所有文件路径全部加上&#x2F;Merhecc&#x2F;，除此之外并没有找到其他好用的办法。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术问题</tag>
      </tags>
  </entry>
  <entry>
    <title>展开运算符</title>
    <url>/Merhecc/2023/10/11/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/05%E3%80%81%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h1><blockquote>
<p>在ES2015中引入了（…）作为<strong>展开运算符</strong>，</p>
</blockquote>
<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>如同rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>



<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>在函数中可以将数组，按顺序分配函数的形参，类似于数组结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line"><span class="title function_">add</span>(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<p>也可以作为其中几个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title function_">add2</span>(<span class="number">1</span>, ...arry) <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 等同于f(1, 2, 3)</span></span><br></pre></td></tr></table></figure>



<h3 id="展开运算符后面跟表达式"><a href="#展开运算符后面跟表达式" class="headerlink" title="展开运算符后面跟表达式"></a>展开运算符后面跟表达式</h3><p>这里将[‘a’]展开为’a’，如果…后面是空数组，则没有任何效果输出结果只有[‘b’]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> arr = [...(x &gt; <span class="number">0</span> ? [<span class="string">&#x27;a&#x27;</span>] : []),<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>



<h3 id="替代apply方法"><a href="#替代apply方法" class="headerlink" title="替代apply方法"></a>替代apply方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y, z</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// apply()方法</span></span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, args);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开运算符</span></span><br><span class="line"><span class="title function_">f</span>(... args);  </span><br></pre></td></tr></table></figure>

<h4 id="案例，"><a href="#案例，" class="headerlink" title="案例，"></a>案例，</h4><p>求最大值 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>]</span><br><span class="line"><span class="comment">// apply()方法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开运算符写法：</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...args)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>)</span><br></pre></td></tr></table></figure>

<h4 id="案例，-1"><a href="#案例，-1" class="headerlink" title="案例，"></a>案例，</h4><p>数组合并1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>数组合并2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 - concat()方法</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(more)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span><br></pre></td></tr></table></figure>

<p>数组拆分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="comment">// ES5 - slice()方法</span></span><br><span class="line"><span class="keyword">const</span> a=list[<span class="number">0</span>], rest = list.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> [a, ...rest]= list</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, rest)</span><br><span class="line"><span class="comment">// a [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>数组解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当进行数组赋值时，展开运算符只能放在最后，以下都会报错</span></span><br><span class="line"><span class="keyword">const</span> [...first, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>



<p>时间日期</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(...[<span class="number">2023</span>, <span class="number">10</span>, <span class="number">11</span>]));</span><br><span class="line"><span class="comment">// Sat Nov 11 2023 00:00:00 GMT+0800</span></span><br></pre></td></tr></table></figure>



<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>展开运算符的引入替代了arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">restParamater</span>(<span class="params">x, y, ...a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x + y) * a.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">restParamater</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="number">7</span>))  </span><br><span class="line"><span class="comment">// 输出结果为 9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="使用展开操作符会创建一个真正的数组"><a href="#使用展开操作符会创建一个真正的数组" class="headerlink" title="使用展开操作符会创建一个真正的数组"></a>使用展开操作符会创建一个<strong>真正的数组</strong></h3><p>字符串 转换为 数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> strArray = [...str];</span><br><span class="line"><span class="comment">// strArray 现在包含 [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;,&quot;, &quot; &quot;, &quot;W&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现了Iterator接口的对象，都可以使用展开运算符，转换为数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title function_">map</span>([</span><br><span class="line">    [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.<span class="title function_">keys</span>()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>增强对象属性</title>
    <url>/Merhecc/2023/10/08/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/06%E3%80%81%E5%A2%9E%E5%BC%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p><strong>数组结构：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>值交换：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>

<p><strong>对象解构：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; x, y &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 输出结果为 &#123;x: &#x27;b&#x27;, y: &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Array.from()方法</title>
    <url>/Merhecc/2023/10/11/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/06%E3%80%81Array.from()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Array-from-方法"><a href="#Array-from-方法" class="headerlink" title="Array.from()方法"></a>Array.from()方法</h1><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将 类数组对象（array-like object）和 可遍历对象（iterable object）转换为真数组</p>
<h4 id="1、类数组对象"><a href="#1、类数组对象" class="headerlink" title="1、类数组对象"></a>1、类数组对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="2、可遍历对象-NodeList集合、arguments对象"><a href="#2、可遍历对象-NodeList集合、arguments对象" class="headerlink" title="2、可遍历对象 - NodeList集合、arguments对象"></a>2、可遍历对象 - NodeList集合、arguments对象</h4><p>常见的类数组对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NodeList 对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(ps).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>任何有length属性的对象，都可以通过Array.from方法转换为数组，这种情况展开运算符无法转换</p>
</blockquote>
<h3 id="元素处理"><a href="#元素处理" class="headerlink" title="元素处理"></a>元素处理</h3><p>Array.from还可以接收第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>, <span class="comment">// &#x27;0&#x27;代表类数组下标为0</span></span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arrayLike = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, <span class="function"><span class="params">x</span> =&gt;</span> x * x);   <span class="comment">// [1, 4, 9]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">arrayLike = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">arrayLike = <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br></pre></td></tr></table></figure>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1、取出DOM节点的文本内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> spans = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;span.name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//map()</span></span><br><span class="line"><span class="keyword">let</span> names1 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.from()</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>);</span><br></pre></td></tr></table></figure>

<p>2、处理稀疏数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>], <span class="function"><span class="params">n</span> =&gt;</span> n || <span class="number">0</span>); <span class="comment">// [1, 0, 2, 0, 3]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>n</code> 代表数组中的每个元素。表达式 <code>n || 0</code> 的含义是，如果<code>n</code>的值是假（如<code>undefined</code>、<code>null</code>、<code>false</code>等），则返回<code>0</code>，否则返回<code>n</code>的原始值。这就是如何将<code>undefined</code>替换为<code>0</code>的原理。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>sitemap</title>
    <url>/Merhecc/2023/10/01/sitemap/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JavaScript中的Apply()方法</title>
    <url>/Merhecc/2023/10/08/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/04%E3%80%81apply%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong>apply函数的一般形式为function.apply(对象, 数组)</strong></p>
<p><strong>例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Hello</span>, \$&#123;name&#125;! I am $&#123;~<span class="variable language_">this</span>.<span class="property">name</span>&#125;.);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用 apply 方法将 person 对象作为上下文，并传递参数 &#x27;Alice&#x27;</span></span><br><span class="line">greet.<span class="title function_">apply</span>(person, [<span class="string">&#x27;Alice&#x27;</span>]); <span class="comment">// 输出：Hello, Alice! I am John.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>1、也就是说如果不使用apply()，greet()就找不到这个this.name。</strong></p>
<p><strong>2、apply将数组转换为参数</strong></p>
<p><strong>例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> params = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...为展开运算符</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...params));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">apply</span>(<span class="literal">undefined</span>, params)); <span class="comment">// ES5方法，输出结构为12</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型检测</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/07%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%20/</url>
    <content><![CDATA[<ol>
<li>对于一般的数据类型检测，<strong>typeof</strong> 和 <strong>Object.prototype.toString.call()</strong> 是常用的方法。</li>
<li>如果你需要检测数组，使用 <strong>Array.isArray()</strong> 更清晰和精确。</li>
<li>如果涉及到自定义对象或构造函数，<strong>instanceof</strong> 可能更合适。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>copyWithin()方法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/09%E3%80%81copyWithin()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h1><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>将数组指定下标的值，复制到指定位置，这会修改原数组</p>
<p>Array.prototype.copyWithin(<strong>target, start &#x3D; 0, end &#x3D; this.length</strong>)</p>
<blockquote>
<p>target（必选）：从该位置开始替换数据。</p>
<p>start（可选）：从该位置开始读取数据，默认为0。负值表示倒数。</p>
<p>end（可选）：到该位置前停止读取数据，默认等于数组长度。负值表示倒数。</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Array.of()方法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/08%E3%80%81Array.of()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h1><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>Array.of 方法用于将一组值转换为数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>

<h3 id="引入原因"><a href="#引入原因" class="headerlink" title="引入原因"></a>引入原因</h3><p>弥补数组构造函数 Array() 的不足：Array() 会因为参数个数不同而返回不同结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>



<h3 id="因此，Array-of-替代了-Array-、new-Array"><a href="#因此，Array-of-替代了-Array-、new-Array" class="headerlink" title="因此，Array.of() 替代了 Array() 、new Array()"></a>因此，Array.of() 替代了 Array() 、new Array()</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组实例的find()和findIndex()方法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/10%E3%80%81%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84find()%E5%92%8CfindIndex()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组实例的find-和findIndex-方法"><a href="#数组实例的find-和findIndex-方法" class="headerlink" title="数组实例的find()和findIndex()方法"></a>数组实例的find()和findIndex()方法</h1><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><blockquote>
<p>用于找出第一个符合条件的数组成员，并返回这个成员。都不符合返回 undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>, <span class="number">10</span>].<span class="title function_">find</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">// -5</span></span><br></pre></td></tr></table></figure>

<p>回调函数方式，接收 value（当前值）、index（当前下标）、arr（原数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>



<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><blockquote>
<p>用于返回第一个符合条件的数组成员下标。都不符合返回 -1</p>
</blockquote>
<p>使用方法和 find() 类似</p>
<h4 id="这两个方法都可以发现NaN，弥补了IndexOf方法的不足"><a href="#这两个方法都可以发现NaN，弥补了IndexOf方法的不足" class="headerlink" title="这两个方法都可以发现NaN，弥补了IndexOf方法的不足"></a>这两个方法都可以发现NaN，弥补了IndexOf方法的不足</h4><blockquote>
<p>indexOf方法无法识别数组的NaN成员，而findIndex方法可以借助Object.is方法做到</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">findIndex</span>( <span class="function"><span class="params">y</span> =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, y))</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>



<h3 id="额外补充-fill-方法"><a href="#额外补充-fill-方法" class="headerlink" title="额外补充 fill() 方法"></a>额外补充 fill() 方法</h3><blockquote>
<p>用于填充数组，一般用于数组初始化，抹去已有元素</p>
<p>可选参数 fill(填充内容, 起始位置, 结束位置)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组实例的entries()、keys()、values()方法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/11%E3%80%81%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84entries()%E3%80%81keys()%E3%80%81values()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组实例的entries-、keys-、values-方法"><a href="#数组实例的entries-、keys-、values-方法" class="headerlink" title="数组实例的entries()、keys()、values()方法"></a>数组实例的entries()、keys()、values()方法</h1><blockquote>
<p>ES6新增的这几个方法，都是用于遍历数组</p>
<blockquote>
<p><strong>key()</strong> 对 <strong>键名</strong> 遍历</p>
<p><strong>values()</strong> 对 <strong>键值</strong> 遍历</p>
<p><strong>entries()</strong> 对 <strong>键值对</strong> 遍历</p>
</blockquote>
</blockquote>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以使用 entries.next().value 一项一项遍历对象</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组实例的includes()方法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/12%E3%80%81%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84includes()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组实例的includes-方法"><a href="#数组实例的includes-方法" class="headerlink" title="数组实例的includes()方法"></a>数组实例的includes()方法</h1><h3 id="引入原因"><a href="#引入原因" class="headerlink" title="引入原因"></a>引入原因</h3><p>解决了 indexOf 的两个缺点：</p>
<p>1、找到参数第一个出现位置，还需要判断是否等于 -1</p>
<p>2、内部使用 &#x3D;&#x3D;&#x3D; ，对NaN会误判</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>找到返回 true，否则符合 false。第二个参数（可选）用于指定搜索起始位置，负数为倒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>属性的简洁表示法</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/1%E3%80%81%E5%B1%9E%E6%80%A7%E7%9A%84%E7%AE%80%E6%B4%81%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
    <content><![CDATA[<h1 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h1><blockquote>
<p>对象属性的简洁表示法是一种语法糖，允许你更简洁地定义对象属性</p>
</blockquote>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>当属性名和属性值的变量名相同时，你可以只写变量名，而不需要重复书写属性名和赋值符。</p>
<h4 id="对象属性："><a href="#对象属性：" class="headerlink" title="对象属性："></a>对象属性：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用简洁表示法创建对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; name, age &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &quot;Alice&quot;, age: 30 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法定义："><a href="#方法定义：" class="headerlink" title="方法定义："></a>方法定义：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = &#123;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greeting.<span class="title function_">sayHello</span>(); <span class="comment">// &quot;Hello!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>属性名表达式</title>
    <url>/Merhecc/2023/10/12/JavaScript/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/2%E3%80%81%E5%B1%9E%E6%80%A7%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h1><blockquote>
<ol>
<li>在JavaScript中，属性名表达式是用来指定对象的属性名的一种方式。</li>
<li>属性名可以是一个字符串、一个变量、一个数字或一个表达式。</li>
<li>属性名表达式允许你以动态的方式定义对象的属性名，而不仅仅是硬编码的字符串。</li>
</ol>
</blockquote>
<h3 id="JavaScript语言定义对象的属性有两种方法"><a href="#JavaScript语言定义对象的属性有两种方法" class="headerlink" title="JavaScript语言定义对象的属性有两种方法"></a>JavaScript语言定义对象的属性有两种方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">obj.<span class="property">foo</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">obj[<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>



<p><strong>使用字符串字面量作为属性名：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用变量作为属性名：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> propertyName = <span class="string">&quot;address&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  [propertyName]: <span class="string">&quot;123 Main St&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用数字作为属性名：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> colors = &#123;</span><br><span class="line">  [index]: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用表达式作为属性名：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefix = <span class="string">&quot;user_&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> userId = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> users = &#123;</span><br><span class="line">  [prefix + userId]: <span class="string">&quot;JohnDoe&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>使用计算属性名：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  [prop]: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
